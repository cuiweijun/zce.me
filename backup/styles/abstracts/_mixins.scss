// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

@function breakpoint-next($name) {
  $breakpoint-names: map-keys($breakpoints);
  $index: index($breakpoint-names, $name);
  @if not $index {
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
  }
  @return if(
    $index < length($breakpoint-names),
    nth($breakpoint-names, $index + 1),
    null
  );
}

@function breakpoint-min($name) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name) {
  $next: breakpoint-next($name);
  @return if($next, breakpoint-min($next) - 0.02, null);
}

@mixin media-breakpoint-up($name) {
  $min: breakpoint-min($name);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name) {
  $max: breakpoint-max($name);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-between($lower, $upper) {
  $min: breakpoint-min($lower);
  $max: breakpoint-max($upper);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper) {
      @content;
    }
  }
}

@mixin media-breakpoint-only($name) {
  $min: breakpoint-min($name);
  $max: breakpoint-max($name);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name) {
      @content;
    }
  }
}

@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin container($width: $container-width, $padding: $container-padding) {
  margin-right: auto;
  margin-left: auto;
  padding-right: $padding;
  padding-left: $padding;
  max-width: $width;
}

@mixin row {
  display: flex;
  flex-wrap: wrap;
  margin-right: (-$container-padding);
  margin-left: (-$container-padding);
}

@mixin column($basis: auto) {
  flex: 1 1 $basis;
  margin-right: $container-padding;
  margin-left: $container-padding;
  margin-bottom: ($container-padding * 2);
  max-width: 100%;
  width: 100%;
}

@mixin sr-only {
  position: absolute;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  padding: 0;
  width: 1px;
  height: 1px;
  border: 0;
  white-space: nowrap;
}
